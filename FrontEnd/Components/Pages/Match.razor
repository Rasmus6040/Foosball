@page "/match"
@rendermode InteractiveServer
@using DTO.Data.Entities
@using Microsoft.AspNetCore.Authorization
@using DTO.Data.Models
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@attribute [Authorize]
<PageTitle>Counter</PageTitle>

<div class="match-list">
    @foreach(MatchEntity match in _matches)
    {
        <MatchCard Match="match" />
    }
</div>

<div class="match-form">
    <div class="score-wrapper">
        <div class="red-team">
            <h3>Red team</h3>
            <div class="team-images">
                @foreach(PlayerEntity player in _redTeam)
                {
                    <img class="player-avatar" src=@player.Name alt="Red Team Player">
                }
                @if (_redTeam.Count < 2)
                {
                    <SfButton CssClass="add-player-button e-link" @onclick="() => ShowDialog(false)" IconCss="e-icons e-circle-add"></SfButton>
                }
            </div> 
            <div class="score">
                <label for="redScore">Red Score</label>
                <SfNumericTextBox id="redScore" @bind-Value="_redScore" TValue="int" Min="0" Max="10" CssClass="score-input"/>
            </div>
        </div>
        <div class="blue-team">
            <h3>Blue team</h3>
            <div class="team-images">
                @foreach(PlayerEntity player in _blueTeam)
                {
                <img class="player-avatar" src=@player.Name alt="Blue Team Player">
                }
                @if (_blueTeam.Count < 2)
                {
                    <SfButton CssClass="add-player-button e-link" @onclick="() => ShowDialog(true)" IconCss="e-icons e-circle-add"></SfButton>
                }
            </div> 
            <div class="score">
                <label for="blueScore">Blue Score</label>
                <SfNumericTextBox id="blueScore" @bind-Value="_blueScore" TValue="int" Min="0" Max="10" CssClass="score-input"/>
            </div>
        </div>
    </div>

    <div class="switch-wrapper">
        <label for="rankedSwitch">Ranked Match</label>
        <SfSwitch id="rankedSwitch" @bind-Checked="_isRanked" />
    </div>

    <div class="button-wrapper">
        <SfButton IsPrimary="true" @onclick="ValidateMatch">New Match</SfButton>
    </div>

    <p>@_matchResult</p>
</div>

<PlayerSearchDialog BlueTeam="true" Visible="@_isBlueDialogVisible" VisibleChanged="@(value => _isBlueDialogVisible = value)" PlayerSubmitted="AddPlayerToBlueTeam"></PlayerSearchDialog>
<PlayerSearchDialog BlueTeam="false" Visible="@_isRedDialogVisible" VisibleChanged="@(value => _isRedDialogVisible = value)" PlayerSubmitted="AddPlayerToRedTeam"></PlayerSearchDialog>

@code {
    private int _redScore;
    private int _blueScore;
    private bool _isRanked;
    private string _matchResult = string.Empty;
    private readonly List<MatchEntity> _matches = [];
    private bool _isBlueDialogVisible;
    private bool _isRedDialogVisible;
    private readonly List<PlayerEntity> _redTeam = [];
    private readonly List<PlayerEntity> _blueTeam = [];
    
    private void AddPlayerToRedTeam(PlayerEntity player) => _redTeam.Add(player);
    private void AddPlayerToBlueTeam(PlayerEntity player) => _blueTeam.Add(player);
    private void ShowDialog(bool isBlueTeam)
    {
        if (isBlueTeam)
        {
            _isBlueDialogVisible = true;
        }
        else
        {
            _isRedDialogVisible = true;
        }
    }

    private void ValidateMatch()
    {
        if (IsMatchValid())
        {
            _matchResult = _redScore > _blueScore ? "Red wins!" : "Blue wins!";
            AddMatch(_redScore, _blueScore, _isRanked);
            ResetScores();
        }
        else
        {
            _matchResult = "Keep playing until a valid score is reached.";
        }
    }

    private bool IsMatchValid()
    {
        return (_redScore >= 5 || _blueScore >= 5) && Math.Abs(_redScore - _blueScore) >= 2 || _redScore == 8 || _blueScore == 8; 
    }

    private void ResetScores()
    {
        _redScore = 0;
        _blueScore = 0;
    }

    private void AddMatch(int redScore, int blueScore, bool isRanked)
    {
        var match = new MatchEntity
        {
            TeamAScore = redScore,
            TeamBScore = blueScore,
            Ranked = isRanked,
            Date = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
            PlayerMatches = [
            new PlayerMatchEntity
            {
                PlayerId = 1,
                Team = 1
            },
            new PlayerMatchEntity
            {
                PlayerId = 2,
                Team = 2,
            }
            ]
        };
        _matches.Add(match);
    }
}


<style>
    .match-form {
        margin: 0 auto;
        max-width: 800px;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    .score-wrapper {
        display: flex;
        gap: 2.5rem;
        align-items: center;
    }
    .switch-wrapper, .button-wrapper {
        margin-top: 1rem;
    }
    
    .team-images {
        display: flex;
        justify-content: space-between;
    }
    
    .player-avatar{
        width: 40%;
        max-width: 160px;
        aspect-ratio : 1 / 1;
    }

    .add-player-button {
        margin: auto;
    }

    .add-player-button span {
        font-size: 60px !important;
        color : #323539;
    }
    
    .team-images {
        min-height: 140px;
    }
    .red-team, .blue-team {
        gap: 1rem;
    }
    
    .score {
        max-width: 50%;
    }
</style>
