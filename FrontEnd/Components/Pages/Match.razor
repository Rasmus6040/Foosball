@page "/match"
@rendermode InteractiveServer
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

<PageTitle>Counter</PageTitle>

<div class="match-list">
    @foreach(DTO.Data.Match match in _matches)
    {
        <MatchCard Match="match" />
    }
</div>

<div class="match-form">
    <div class="score-wrapper">
        <label for="redScore">Red Score</label>
        <SfNumericTextBox id="redScore" @bind-Value="_redScore" TValue="int" Min="0" Max="10" CssClass="score-input" />

        <label for="blueScore">Blue Score</label>
        <SfNumericTextBox id="blueScore" @bind-Value="_blueScore" TValue="int" Min="0" Max="10" CssClass="score-input" />
    </div>

    <div class="switch-wrapper">
        <label for="rankedSwitch">Ranked Match</label>
        <SfSwitch id="rankedSwitch" @bind-Checked="_isRanked" />
    </div>

    <div class="button-wrapper">
        <SfButton IsPrimary="true" @onclick="ValidateMatch">New Match</SfButton>
    </div>

    <p>@_matchResult</p>
</div>



@code {
    private int _redScore;
    private int _blueScore;
    private bool _isRanked;
    private string _matchResult = string.Empty;
    private readonly List<DTO.Data.Match> _matches = [];


    private void ValidateMatch()
    {
        if (IsMatchValid())
        {
            _matchResult = _redScore > _blueScore ? "Red wins!" : "Blue wins!";
            AddMatch(_redScore, _blueScore, _isRanked);
            ResetScores();
        }
        else
        {
            _matchResult = "Keep playing until a valid score is reached.";
        }
    }

    private bool IsMatchValid()
    {
        return (_redScore >= 5 || _blueScore >= 5) && Math.Abs(_redScore - _blueScore) >= 2 || _redScore == 8 || _blueScore == 8; 
    }

    private void ResetScores()
    {
        _redScore = 0;
        _blueScore = 0;
    }

    private void AddMatch(int redScore, int blueScore, bool isRanked)
    {
        var match = new DTO.Data.Match
        {
            TeamAScore = redScore,
            TeamBScore = blueScore,
            Ranked = isRanked,
            Date = DateTimeOffset.UtcNow.ToUnixTimeSeconds()
        };
        _matches.Add(match);
    }
}

<style>
    .match-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    .score-wrapper {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }
    .switch-wrapper, .button-wrapper {
        margin-top: 1rem;
    }
</style>
