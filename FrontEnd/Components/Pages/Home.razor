@page "/"
@rendermode InteractiveServer

<PageTitle>Foosball</PageTitle>

@if (latestMatches == null)
{
<p>
    <em>Loading...</em>
</p>
}
else
{
<table class="table">
    <thead>
    <tr>
        <th>Date</th>
        <th>Team Blue</th>
        <th>Team Red</th>
        <th>Goals Blue</th>
        <th>Goals Red</th>
        <th>Elo Change</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Match match in latestMatches)
    {
    <tr>
        <td>@match.DateOfMatch.ToShortDateString()</td>
        <td>@(string.Join(", ", match.TeamBlue))</td>
        <td>@(string.Join(", ", match.TeamRed))</td>
        <td>@match.GoalsBlue</td>
        <td>@match.GoalsRed</td>
        <td>@match.EloDifference</td>
    </tr>
    }
    </tbody>
</table>
}

@code {
    private Match[]? latestMatches;

    protected override async Task OnInitializedAsync()
    {
    // Simulate asynchronous loading to demonstrate streaming rendering
    await Task.Delay(500);
    DateTime startDate = DateTime.Now;
    var players = new[] { "Rasmus", "Amstrup", "Mads", "Joachim", "Johan"};
    var random = new Random();
    latestMatches = Enumerable.Range(1, 5).Select(index => new Match
        {
            DateOfMatch = startDate.AddDays(index),
            TeamBlue = Enumerable.Range(0, random.Next(1, 3)).Select(x => players[random.Next(1,players.Length)]).ToList(),
            TeamRed = Enumerable.Range(0, random.Next(1, 3)).Select(x => players[random.Next(1,players.Length)]).ToList(),
            GoalsBlue = random.Next(0,10),
            GoalsRed = random.Next(0,10),
            EloDifference = random.Next(1,15) 
        }).ToArray();
    }

    private class Match
    {
        public DateTime DateOfMatch { get; set; }
        public List<string> TeamBlue { get; set; }
        public List<string> TeamRed { get; set; }
        public int GoalsBlue { get; set; }
        public int GoalsRed { get; set; }
        public double EloDifference { get; set; }
    }
}